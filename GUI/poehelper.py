#! /usr/bin/env python3
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 7.6
#  in conjunction with Tcl version 8.6
#    Nov 14, 2023 06:32:07 PM CET  platform: Windows NT

import sys
import tkinter as tk
import tkinter.ttk as ttk
from tkinter.constants import *
import os.path

_script = sys.argv[0]
_location = os.path.dirname(_script)

import poehelper_support

_bgcolor = '#d9d9d9'  # X11 color: 'gray85'
_fgcolor = '#000000'  # X11 color: 'black'
_compcolor = 'gray40' # X11 color: #666666
_ana1color = '#c3c3c3' # Closest X11 color: 'gray76'
_ana2color = 'beige' # X11 color: #f5f5dc
_tabfg1 = 'black' 
_tabfg2 = 'black' 
_tabbg1 = 'grey75' 
_tabbg2 = 'grey89' 
_bgmode = 'light' 

_style_code_ran = 0
def _style_code():
    global _style_code_ran
    if _style_code_ran:
       return
    style = ttk.Style()
    if sys.platform == "win32":
       style.theme_use('winnative')
    style.configure('.',background=_bgcolor)
    style.configure('.',foreground=_fgcolor)
    style.configure('.',font='TkDefaultFont')
    style.map('.',background =
       [('selected', _compcolor), ('active',_ana2color)])
    if _bgmode == 'dark':
       style.map('.',foreground =
         [('selected', 'white'), ('active','white')])
    else:
       style.map('.',foreground =
         [('selected', 'black'), ('active','black')])
    style.configure('Vertical.TScrollbar',  background=_bgcolor,
        arrowcolor= _fgcolor)
    style.configure('Horizontal.TScrollbar',  background=_bgcolor,
        arrowcolor= _fgcolor)
    _style_code_ran = 1

class gui:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''

        top.geometry("825x537+450+154")
        top.minsize(120, 474)
        top.maxsize(3844, 1061)
        top.resizable(1,  1)
        top.title("PoE Helper")
        top.configure(background="#d9d9d9")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")

        self.top = top
        self.che47 = tk.IntVar()
        self.che48 = tk.IntVar()
        self.che49 = tk.IntVar()
        self.che51 = tk.IntVar()
        self.che52 = tk.IntVar()
        self.che53 = tk.IntVar()

        self.Labelframe1 = tk.LabelFrame(self.top)
        self.Labelframe1.place(relx=0.584, rely=0.0, relheight=0.171
                , relwidth=0.407)
        self.Labelframe1.configure(relief='groove')
        self.Labelframe1.configure(foreground="#000000")
        self.Labelframe1.configure(text='''Threads FPS''')
        self.Labelframe1.configure(background="#d9d9d9")
        self.Labelframe1.configure(highlightbackground="#d9d9d9")
        self.Labelframe1.configure(highlightcolor="black")
        self.Label1 = tk.Label(self.Labelframe1)
        self.Label1.place(relx=0.018, rely=0.261, height=30, width=85
                , bordermode='ignore')
        self.Label1.configure(activebackground="#f9f9f9")
        self.Label1.configure(anchor='w')
        self.Label1.configure(background="#d9d9d9")
        self.Label1.configure(compound='left')
        self.Label1.configure(disabledforeground="#a3a3a3")
        self.Label1.configure(foreground="#000000")
        self.Label1.configure(highlightbackground="#d9d9d9")
        self.Label1.configure(highlightcolor="black")
        self.Label1.configure(text='''Detect: 80 fps''')
        self.Label2 = tk.Label(self.Labelframe1)
        self.Label2.place(relx=0.25, rely=0.25, height=30, width=75
                , bordermode='ignore')
        self.Label2.configure(activebackground="#f9f9f9")
        self.Label2.configure(anchor='w')
        self.Label2.configure(background="#d9d9d9")
        self.Label2.configure(compound='left')
        self.Label2.configure(disabledforeground="#a3a3a3")
        self.Label2.configure(foreground="#000000")
        self.Label2.configure(highlightbackground="#d9d9d9")
        self.Label2.configure(highlightcolor="black")
        self.Label2.configure(text='''OCR :  80 fps''')
        self.Label3 = tk.Label(self.Labelframe1)
        self.Label3.place(relx=0.473, rely=0.25, height=30, width=109
                , bordermode='ignore')
        self.Label3.configure(activebackground="#f9f9f9")
        self.Label3.configure(anchor='w')
        self.Label3.configure(background="#d9d9d9")
        self.Label3.configure(compound='left')
        self.Label3.configure(disabledforeground="#a3a3a3")
        self.Label3.configure(foreground="#000000")
        self.Label3.configure(highlightbackground="#d9d9d9")
        self.Label3.configure(highlightcolor="black")
        self.Label3.configure(text='''Screenshot: 80 fps''')
        self.Label4 = tk.Label(self.Labelframe1)
        self.Label4.place(relx=0.03, rely=0.62, height=25, width=48
                , bordermode='ignore')
        self.Label4.configure(activebackground="#f9f9f9")
        self.Label4.configure(anchor='w')
        self.Label4.configure(background="#d9d9d9")
        self.Label4.configure(compound='left')
        self.Label4.configure(disabledforeground="#a3a3a3")
        self.Label4.configure(foreground="#000000")
        self.Label4.configure(highlightbackground="#d9d9d9")
        self.Label4.configure(highlightcolor="black")
        self.Label4.configure(text='''HP: 3200''')
        self.Label5 = tk.Label(self.Labelframe1)
        self.Label5.place(relx=0.176, rely=0.62, height=25, width=79
                , bordermode='ignore')
        self.Label5.configure(activebackground="#f9f9f9")
        self.Label5.configure(anchor='w')
        self.Label5.configure(background="#d9d9d9")
        self.Label5.configure(compound='left')
        self.Label5.configure(disabledforeground="#a3a3a3")
        self.Label5.configure(foreground="#000000")
        self.Label5.configure(highlightbackground="#d9d9d9")
        self.Label5.configure(highlightcolor="black")
        self.Label5.configure(text='''Max HP: 3200''')
        self.Label6 = tk.Label(self.Labelframe1)
        self.Label6.place(relx=0.44, rely=0.62, height=25, width=111
                , bordermode='ignore')
        self.Label6.configure(activebackground="#f9f9f9")
        self.Label6.configure(anchor='w')
        self.Label6.configure(background="#d9d9d9")
        self.Label6.configure(compound='left')
        self.Label6.configure(disabledforeground="#a3a3a3")
        self.Label6.configure(foreground="#000000")
        self.Label6.configure(highlightbackground="#d9d9d9")
        self.Label6.configure(highlightcolor="black")
        self.Label6.configure(text='''Auto PAUSE: TRUE''')
        self.Labelframe2 = tk.LabelFrame(self.top)
        self.Labelframe2.place(relx=0.012, rely=0.438, relheight=0.553
                , relwidth=0.981)
        self.Labelframe2.configure(relief='groove')
        self.Labelframe2.configure(foreground="#000000")
        self.Labelframe2.configure(text='''Info''')
        self.Labelframe2.configure(background="#d9d9d9")
        self.Labelframe2.configure(highlightbackground="#d9d9d9")
        self.Labelframe2.configure(highlightcolor="black")
        _style_code()
        self.Scrolledlistbox1 = ScrolledListBox(self.Labelframe2)
        self.Scrolledlistbox1.place(relx=0.012, rely=0.104, relheight=0.848
                , relwidth=0.979, bordermode='ignore')
        self.Scrolledlistbox1.configure(background="white")
        self.Scrolledlistbox1.configure(cursor="xterm")
        self.Scrolledlistbox1.configure(disabledforeground="#a3a3a3")
        self.Scrolledlistbox1.configure(font="TkFixedFont")
        self.Scrolledlistbox1.configure(foreground="black")
        self.Scrolledlistbox1.configure(highlightbackground="#d9d9d9")
        self.Scrolledlistbox1.configure(highlightcolor="#d9d9d9")
        self.Scrolledlistbox1.configure(selectbackground="#c4c4c4")
        self.Scrolledlistbox1.configure(selectforeground="black")
        self.menubar = tk.Menu(top,font="TkMenuFont",bg=_bgcolor,fg=_fgcolor)
        top.configure(menu = self.menubar)

        self.Labelframe3 = tk.LabelFrame(self.top)
        self.Labelframe3.place(relx=0.012, rely=0.0, relheight=0.171
                , relwidth=0.262)
        self.Labelframe3.configure(relief='groove')
        self.Labelframe3.configure(foreground="#000000")
        self.Labelframe3.configure(text='''Labelframe''')
        self.Labelframe3.configure(background="#d9d9d9")
        self.Labelframe3.configure(highlightbackground="#d9d9d9")
        self.Labelframe3.configure(highlightcolor="black")
        self.start_button = tk.Button(self.Labelframe3)
        self.start_button.place(relx=0.065, rely=0.424, height=24, width=47
                , bordermode='ignore')
        self.start_button.configure(activebackground="beige")
        self.start_button.configure(activeforeground="black")
        self.start_button.configure(background="#d9d9d9")
        self.start_button.configure(command=poehelper_support.start_bot_command)
        self.start_button.configure(compound='left')
        self.start_button.configure(disabledforeground="#a3a3a3")
        self.start_button.configure(foreground="#000000")
        self.start_button.configure(highlightbackground="#d9d9d9")
        self.start_button.configure(highlightcolor="black")
        self.start_button.configure(pady="0")
        self.start_button.configure(text='''START''')
        self.stop_button = tk.Button(self.Labelframe3)
        self.stop_button.place(relx=0.324, rely=0.424, height=24, width=47
                , bordermode='ignore')
        self.stop_button.configure(activebackground="beige")
        self.stop_button.configure(activeforeground="black")
        self.stop_button.configure(background="#d9d9d9")
        self.stop_button.configure(command=poehelper_support.stop_bot_command)
        self.stop_button.configure(compound='center')
        self.stop_button.configure(disabledforeground="#a3a3a3")
        self.stop_button.configure(foreground="#000000")
        self.stop_button.configure(highlightbackground="#d9d9d9")
        self.stop_button.configure(highlightcolor="black")
        self.stop_button.configure(pady="0")
        self.stop_button.configure(text='''STOP''')
        self.pause_button = tk.Button(self.Labelframe3)
        self.pause_button.place(relx=0.602, rely=0.424, height=24, width=47
                , bordermode='ignore')
        self.pause_button.configure(activebackground="beige")
        self.pause_button.configure(activeforeground="black")
        self.pause_button.configure(background="#d9d9d9")
        self.pause_button.configure(command=poehelper_support.pause_bot_command)
        self.pause_button.configure(compound='right')
        self.pause_button.configure(disabledforeground="#a3a3a3")
        self.pause_button.configure(foreground="#000000")
        self.pause_button.configure(highlightbackground="#d9d9d9")
        self.pause_button.configure(highlightcolor="black")
        self.pause_button.configure(pady="0")
        self.pause_button.configure(text='''PAUSE''')
        self.debug_text_box = tk.LabelFrame(self.top)
        self.debug_text_box.place(relx=0.012, rely=0.181, relheight=0.261
                , relwidth=0.981)
        self.debug_text_box.configure(relief='groove')
        self.debug_text_box.configure(foreground="#000000")
        self.debug_text_box.configure(text='''Settings''')
        self.debug_text_box.configure(background="#d9d9d9")
        self.debug_text_box.configure(highlightbackground="#d9d9d9")
        self.debug_text_box.configure(highlightcolor="black")
        self.Checkbutton1 = tk.Checkbutton(self.debug_text_box)
        self.Checkbutton1.place(relx=0.012, rely=0.129, relheight=0.143
                , relwidth=0.142, bordermode='ignore')
        self.Checkbutton1.configure(activebackground="beige")
        self.Checkbutton1.configure(activeforeground="black")
        self.Checkbutton1.configure(anchor='w')
        self.Checkbutton1.configure(background="#d9d9d9")
        self.Checkbutton1.configure(compound='left')
        self.Checkbutton1.configure(disabledforeground="#a3a3a3")
        self.Checkbutton1.configure(foreground="#000000")
        self.Checkbutton1.configure(highlightbackground="#d9d9d9")
        self.Checkbutton1.configure(highlightcolor="black")
        self.Checkbutton1.configure(justify='left')
        self.Checkbutton1.configure(selectcolor="#d9d9d9")
        self.Checkbutton1.configure(text='''Debug''')
        self.Checkbutton1.configure(variable=self.che47)
        self.Checkbutton1_tooltip = \
        ToolTip(self.Checkbutton1, '''Enable or disable debug mode. In debug mode more precise information was send.''')

        self.character_name_entry = tk.Entry(self.debug_text_box)
        self.character_name_entry.place(relx=0.173, rely=0.264, height=20
                , relwidth=0.203, bordermode='ignore')
        self.character_name_entry.configure(background="white")
        self.character_name_entry.configure(disabledforeground="#a3a3a3")
        self.character_name_entry.configure(font="TkFixedFont")
        self.character_name_entry.configure(foreground="#000000")
        self.character_name_entry.configure(highlightbackground="#d9d9d9")
        self.character_name_entry.configure(highlightcolor="black")
        self.character_name_entry.configure(insertbackground="black")
        self.character_name_entry.configure(selectbackground="#c4c4c4")
        self.character_name_entry.configure(selectforeground="black")
        self.character_name_entry_tooltip = \
        ToolTip(self.character_name_entry, '''Character name to auto create game instance''')

        self.Label7 = tk.Label(self.debug_text_box)
        self.Label7.place(relx=0.012, rely=0.264, height=20, width=99
                , bordermode='ignore')
        self.Label7.configure(activebackground="#f9f9f9")
        self.Label7.configure(anchor='w')
        self.Label7.configure(background="#d9d9d9")
        self.Label7.configure(compound='left')
        self.Label7.configure(disabledforeground="#a3a3a3")
        self.Label7.configure(foreground="#000000")
        self.Label7.configure(highlightbackground="#d9d9d9")
        self.Label7.configure(highlightcolor="black")
        self.Label7.configure(text='''Character name :''')
        self.Label8 = tk.Label(self.debug_text_box)
        self.Label8.place(relx=0.012, rely=0.464, height=19, width=128
                , bordermode='ignore')
        self.Label8.configure(activebackground="#f9f9f9")
        self.Label8.configure(anchor='w')
        self.Label8.configure(background="#d9d9d9")
        self.Label8.configure(compound='left')
        self.Label8.configure(disabledforeground="#a3a3a3")
        self.Label8.configure(foreground="#000000")
        self.Label8.configure(highlightbackground="#d9d9d9")
        self.Label8.configure(highlightcolor="black")
        self.Label8.configure(text='''Game window name :''')
        self.window_name_entry = tk.Entry(self.debug_text_box)
        self.window_name_entry.place(relx=0.173, rely=0.464, height=20
                , relwidth=0.203, bordermode='ignore')
        self.window_name_entry.configure(background="white")
        self.window_name_entry.configure(disabledforeground="#a3a3a3")
        self.window_name_entry.configure(font="TkFixedFont")
        self.window_name_entry.configure(foreground="#000000")
        self.window_name_entry.configure(highlightbackground="#d9d9d9")
        self.window_name_entry.configure(highlightcolor="black")
        self.window_name_entry.configure(insertbackground="black")
        self.window_name_entry.configure(selectbackground="#c4c4c4")
        self.window_name_entry.configure(selectforeground="black")
        self.window_name_entry_tooltip = \
        ToolTip(self.window_name_entry, '''Window name to check if game is running.''')

        self.Label9 = tk.Label(self.debug_text_box)
        self.Label9.place(relx=0.012, rely=0.729, height=19, width=91
                , bordermode='ignore')
        self.Label9.configure(activebackground="#f9f9f9")
        self.Label9.configure(anchor='w')
        self.Label9.configure(background="#d9d9d9")
        self.Label9.configure(compound='left')
        self.Label9.configure(disabledforeground="#a3a3a3")
        self.Label9.configure(foreground="#000000")
        self.Label9.configure(highlightbackground="#d9d9d9")
        self.Label9.configure(highlightcolor="black")
        self.Label9.configure(text='''Button repeat :''')
        self.button_repeats_scale =  tk.Scale(self.debug_text_box, from_=1.0, to=10.0, resolution=1.0)
        self.button_repeats_scale.place(relx=0.148, rely=0.593, relheight=0.3
                , relwidth=0.227)
        self.button_repeats_scale.configure(activebackground="beige")
        self.button_repeats_scale.configure(background="#d9d9d9")
        self.button_repeats_scale.configure(foreground="#000000")
        self.button_repeats_scale.configure(highlightbackground="#d9d9d9")
        self.button_repeats_scale.configure(highlightcolor="black")
        self.button_repeats_scale.configure(length="185")
        self.button_repeats_scale.configure(orient="horizontal")
        self.button_repeats_scale.configure(troughcolor="#d9d9d9")
        self.button_repeats_scale_tooltip = \
        ToolTip(self.button_repeats_scale, '''How many times try pressing button to take a buff''')

        self.key_w_checkbutton = tk.Checkbutton(self.debug_text_box)
        self.key_w_checkbutton.place(relx=0.419, rely=0.264, relheight=0.164
                , relwidth=0.075, bordermode='ignore')
        self.key_w_checkbutton.configure(activebackground="beige")
        self.key_w_checkbutton.configure(activeforeground="black")
        self.key_w_checkbutton.configure(anchor='w')
        self.key_w_checkbutton.configure(background="#d9d9d9")
        self.key_w_checkbutton.configure(compound='left')
        self.key_w_checkbutton.configure(disabledforeground="#a3a3a3")
        self.key_w_checkbutton.configure(foreground="#000000")
        self.key_w_checkbutton.configure(highlightbackground="#d9d9d9")
        self.key_w_checkbutton.configure(highlightcolor="black")
        self.key_w_checkbutton.configure(justify='left')
        self.key_w_checkbutton.configure(selectcolor="#d9d9d9")
        self.key_w_checkbutton.configure(text='''Key W''')
        self.key_w_checkbutton.configure(variable=self.che48)
        self.key_w_checkbutton_tooltip = \
        ToolTip(self.key_w_checkbutton, '''Enable auto press key to HASTE buff.''')

        self.key_E_checkbutton = tk.Checkbutton(self.debug_text_box)
        self.key_E_checkbutton.place(relx=0.419, rely=0.464, relheight=0.164
                , relwidth=0.075, bordermode='ignore')
        self.key_E_checkbutton.configure(activebackground="beige")
        self.key_E_checkbutton.configure(activeforeground="black")
        self.key_E_checkbutton.configure(anchor='w')
        self.key_E_checkbutton.configure(background="#d9d9d9")
        self.key_E_checkbutton.configure(compound='left')
        self.key_E_checkbutton.configure(disabledforeground="#a3a3a3")
        self.key_E_checkbutton.configure(foreground="#000000")
        self.key_E_checkbutton.configure(highlightbackground="#d9d9d9")
        self.key_E_checkbutton.configure(highlightcolor="black")
        self.key_E_checkbutton.configure(justify='left')
        self.key_E_checkbutton.configure(selectcolor="#d9d9d9")
        self.key_E_checkbutton.configure(text='''Key E''')
        self.key_E_checkbutton.configure(variable=self.che49)
        self.key_E_checkbutton_tooltip = \
        ToolTip(self.key_E_checkbutton, '''Enable auto press key to VITALITY buff.''')

        self.key_R_checkbutton = tk.Checkbutton(self.debug_text_box)
        self.key_R_checkbutton.place(relx=0.419, rely=0.664, relheight=0.164
                , relwidth=0.075, bordermode='ignore')
        self.key_R_checkbutton.configure(activebackground="beige")
        self.key_R_checkbutton.configure(activeforeground="black")
        self.key_R_checkbutton.configure(anchor='w')
        self.key_R_checkbutton.configure(background="#d9d9d9")
        self.key_R_checkbutton.configure(compound='left')
        self.key_R_checkbutton.configure(disabledforeground="#a3a3a3")
        self.key_R_checkbutton.configure(foreground="#000000")
        self.key_R_checkbutton.configure(highlightbackground="#d9d9d9")
        self.key_R_checkbutton.configure(highlightcolor="black")
        self.key_R_checkbutton.configure(justify='left')
        self.key_R_checkbutton.configure(selectcolor="#d9d9d9")
        self.key_R_checkbutton.configure(text='''Key R''')
        self.key_R_checkbutton.configure(variable=self.che51)
        self.key_R_checkbutton_tooltip = \
        ToolTip(self.key_R_checkbutton, '''Enable auto pressing key to BONE ARMOR buff.''')

        self.key_1_checkbutton = tk.Checkbutton(self.debug_text_box)
        self.key_1_checkbutton.place(relx=0.592, rely=0.2, relheight=0.164
                , relwidth=0.099, bordermode='ignore')
        self.key_1_checkbutton.configure(activebackground="beige")
        self.key_1_checkbutton.configure(activeforeground="black")
        self.key_1_checkbutton.configure(anchor='w')
        self.key_1_checkbutton.configure(background="#d9d9d9")
        self.key_1_checkbutton.configure(compound='left')
        self.key_1_checkbutton.configure(disabledforeground="#a3a3a3")
        self.key_1_checkbutton.configure(foreground="#000000")
        self.key_1_checkbutton.configure(highlightbackground="#d9d9d9")
        self.key_1_checkbutton.configure(highlightcolor="black")
        self.key_1_checkbutton.configure(justify='left')
        self.key_1_checkbutton.configure(selectcolor="#d9d9d9")
        self.key_1_checkbutton.configure(text='''Bottle HP''')
        self.key_1_checkbutton.configure(variable=self.che52)
        self.key_w_spinbox = tk.Spinbox(self.debug_text_box, from_=1.0, to=30.0)
        self.key_w_spinbox.place(relx=0.506, rely=0.264, relheight=0.129
                , relwidth=0.056, bordermode='ignore')
        self.key_w_spinbox.configure(activebackground="#f9f9f9")
        self.key_w_spinbox.configure(background="white")
        self.key_w_spinbox.configure(buttonbackground="#d9d9d9")
        self.key_w_spinbox.configure(disabledforeground="#a3a3a3")
        self.key_w_spinbox.configure(font="TkDefaultFont")
        self.key_w_spinbox.configure(foreground="black")
        self.key_w_spinbox.configure(highlightbackground="black")
        self.key_w_spinbox.configure(highlightcolor="black")
        self.key_w_spinbox.configure(increment="0.1")
        self.key_w_spinbox.configure(insertbackground="black")
        self.key_w_spinbox.configure(selectbackground="#c4c4c4")
        self.key_w_spinbox.configure(selectforeground="black")
        self.key_e_spinbox = tk.Spinbox(self.debug_text_box, from_=1.0, to=30.0)
        self.key_e_spinbox.place(relx=0.506, rely=0.464, relheight=0.129
                , relwidth=0.056, bordermode='ignore')
        self.key_e_spinbox.configure(activebackground="#f9f9f9")
        self.key_e_spinbox.configure(background="white")
        self.key_e_spinbox.configure(buttonbackground="#d9d9d9")
        self.key_e_spinbox.configure(disabledforeground="#a3a3a3")
        self.key_e_spinbox.configure(font="TkDefaultFont")
        self.key_e_spinbox.configure(foreground="black")
        self.key_e_spinbox.configure(highlightbackground="black")
        self.key_e_spinbox.configure(highlightcolor="black")
        self.key_e_spinbox.configure(increment="0.1")
        self.key_e_spinbox.configure(insertbackground="black")
        self.key_e_spinbox.configure(selectbackground="#c4c4c4")
        self.key_e_spinbox.configure(selectforeground="black")
        self.key_r_spinbox = tk.Spinbox(self.debug_text_box, from_=1.0, to=30.0)
        self.key_r_spinbox.place(relx=0.506, rely=0.664, relheight=0.121
                , relwidth=0.056, bordermode='ignore')
        self.key_r_spinbox.configure(activebackground="#f9f9f9")
        self.key_r_spinbox.configure(background="white")
        self.key_r_spinbox.configure(buttonbackground="#d9d9d9")
        self.key_r_spinbox.configure(disabledforeground="#a3a3a3")
        self.key_r_spinbox.configure(font="TkDefaultFont")
        self.key_r_spinbox.configure(foreground="black")
        self.key_r_spinbox.configure(highlightbackground="black")
        self.key_r_spinbox.configure(highlightcolor="black")
        self.key_r_spinbox.configure(increment="0.1")
        self.key_r_spinbox.configure(insertbackground="black")
        self.key_r_spinbox.configure(selectbackground="#c4c4c4")
        self.key_r_spinbox.configure(selectforeground="black")
        self.Label10 = tk.Label(self.debug_text_box)
        self.Label10.place(relx=0.468, rely=0.129, height=20, width=104
                , bordermode='ignore')
        self.Label10.configure(activebackground="#f9f9f9")
        self.Label10.configure(anchor='w')
        self.Label10.configure(background="#d9d9d9")
        self.Label10.configure(compound='left')
        self.Label10.configure(disabledforeground="#a3a3a3")
        self.Label10.configure(foreground="#000000")
        self.Label10.configure(highlightbackground="#d9d9d9")
        self.Label10.configure(highlightcolor="black")
        self.Label10.configure(text='''Time to buffs end''')
        self.panic_key_checkbutton = tk.Checkbutton(self.debug_text_box)
        self.panic_key_checkbutton.place(relx=0.592, rely=0.329, relheight=0.171
                , relwidth=0.1, bordermode='ignore')
        self.panic_key_checkbutton.configure(activebackground="beige")
        self.panic_key_checkbutton.configure(activeforeground="black")
        self.panic_key_checkbutton.configure(anchor='w')
        self.panic_key_checkbutton.configure(background="#d9d9d9")
        self.panic_key_checkbutton.configure(compound='left')
        self.panic_key_checkbutton.configure(disabledforeground="#a3a3a3")
        self.panic_key_checkbutton.configure(foreground="#000000")
        self.panic_key_checkbutton.configure(highlightbackground="#d9d9d9")
        self.panic_key_checkbutton.configure(highlightcolor="black")
        self.panic_key_checkbutton.configure(justify='left')
        self.panic_key_checkbutton.configure(selectcolor="#d9d9d9")
        self.panic_key_checkbutton.configure(text='''Key Panic''')
        self.panic_key_checkbutton.configure(variable=self.che53)
        self.Labelframe4 = tk.LabelFrame(self.top)
        self.Labelframe4.place(relx=0.279, rely=0.0, relheight=0.171
                , relwidth=0.299)
        self.Labelframe4.configure(relief='groove')
        self.Labelframe4.configure(foreground="#000000")
        self.Labelframe4.configure(text='''Keybinds info''')
        self.Labelframe4.configure(background="#d9d9d9")
        self.Labelframe4.configure(highlightbackground="#d9d9d9")
        self.Labelframe4.configure(highlightcolor="black")
        self.Label11 = tk.Label(self.Labelframe4)
        self.Label11.place(relx=0.032, rely=0.185, height=19, width=106
                , bordermode='ignore')
        self.Label11.configure(activebackground="#f9f9f9")
        self.Label11.configure(anchor='w')
        self.Label11.configure(background="#d9d9d9")
        self.Label11.configure(compound='left')
        self.Label11.configure(disabledforeground="#a3a3a3")
        self.Label11.configure(foreground="#000000")
        self.Label11.configure(highlightbackground="#d9d9d9")
        self.Label11.configure(highlightcolor="black")
        self.Label11.configure(text='''CRTL+Z - exit from bot''')
        self.Label12 = tk.Label(self.Labelframe4)
        self.Label12.place(relx=0.032, rely=0.38, height=18, width=97
                , bordermode='ignore')
        self.Label12.configure(activebackground="#f9f9f9")
        self.Label12.configure(anchor='w')
        self.Label12.configure(background="#d9d9d9")
        self.Label12.configure(compound='left')
        self.Label12.configure(disabledforeground="#a3a3a3")
        self.Label12.configure(foreground="#000000")
        self.Label12.configure(highlightbackground="#d9d9d9")
        self.Label12.configure(highlightcolor="black")
        self.Label12.configure(text='''SPACEBAR - pause''')

from time import time, localtime, strftime
class ToolTip(tk.Toplevel):
    """ Provides a ToolTip widget for Tkinter. """
    def __init__(self, wdgt, msg=None, msgFunc=None, delay=0.5,
                 follow=True):
        self.wdgt = wdgt
        self.parent = self.wdgt.master
        tk.Toplevel.__init__(self, self.parent, bg='black', padx=1, pady=1)
        self.withdraw()
        self.overrideredirect(True)
        self.msgVar = tk.StringVar()
        if msg is None:
            self.msgVar.set('No message provided')
        else:
            self.msgVar.set(msg)
        self.msgFunc = msgFunc
        self.delay = delay
        self.follow = follow
        self.visible = 0
        self.lastMotion = 0
        self.msg = tk.Message(self, textvariable=self.msgVar, bg=_bgcolor,
                   fg=_fgcolor, font="TkDefaultFont",
                   aspect=1000)
        self.msg.grid()
        self.wdgt.bind('<Enter>', self.spawn, '+')
        self.wdgt.bind('<Leave>', self.hide, '+')
        self.wdgt.bind('<Motion>', self.move, '+')
    def spawn(self, event=None):
        self.visible = 1
        self.after(int(self.delay * 1000), self.show)
    def show(self):
        if self.visible == 1 and time() - self.lastMotion > self.delay:
            self.visible = 2
        if self.visible == 2:
            self.deiconify()
    def move(self, event):
        self.lastMotion = time()
        if self.follow is False:
            self.withdraw()
            self.visible = 1
        self.geometry('+%i+%i' % (event.x_root + 20, event.y_root - 10))
        try:
            self.msgVar.set(self.msgFunc())
        except:
            pass
        self.after(int(self.delay * 1000), self.show)
    def hide(self, event=None):
        self.visible = 0
        self.withdraw()
    def update(self, msg):
        self.msgVar.set(msg)
    def configure(self, **kwargs):
        backgroundset = False
        foregroundset = False
        # Get the current tooltip text just in case the user doesn't provide any.
        current_text = self.msgVar.get()
        # to clear the tooltip text, use the .update method
        if 'debug' in kwargs.keys():
            debug = kwargs.pop('debug', False)
            if debug:
                for key, value in kwargs.items():
                    print(f'key: {key} - value: {value}')
        if 'background' in kwargs.keys():
            background = kwargs.pop('background')
            backgroundset = True
        if 'bg' in kwargs.keys():
            background = kwargs.pop('bg')
            backgroundset = True
        if 'foreground' in kwargs.keys():
            foreground = kwargs.pop('foreground')
            foregroundset = True
        if 'fg' in kwargs.keys():
            foreground = kwargs.pop('fg')
            foregroundset = True

        fontd = kwargs.pop('font', None)
        if 'text' in kwargs.keys():
            text = kwargs.pop('text')
            if (text == '') or (text == "\n"):
                text = current_text
            else:
                self.msgVar.set(text)
        reliefd = kwargs.pop('relief', 'flat')
        justifyd = kwargs.pop('justify', 'left')
        padxd = kwargs.pop('padx', 1)
        padyd = kwargs.pop('pady', 1)
        borderwidthd = kwargs.pop('borderwidth', 2)
        wid = self.msg      # The message widget which is the actual tooltip
        if backgroundset:
            wid.config(bg=background)
        if foregroundset:
            wid.config(fg=foreground)
        wid.config(font=fontd)
        wid.config(borderwidth=borderwidthd)
        wid.config(relief=reliefd)
        wid.config(justify=justifyd)
        wid.config(padx=padxd)
        wid.config(pady=padyd)
#                   End of Class ToolTip

# The following code is added to facilitate the Scrolled widgets you specified.
class AutoScroll(object):
    '''Configure the scrollbars for a widget.'''
    def __init__(self, master):
        #  Rozen. Added the try-except clauses so that this class
        #  could be used for scrolled entry widget for which vertical
        #  scrolling is not supported. 5/7/14.
        try:
            vsb = ttk.Scrollbar(master, orient='vertical', command=self.yview)
        except:
            pass
        hsb = ttk.Scrollbar(master, orient='horizontal', command=self.xview)
        try:
            self.configure(yscrollcommand=self._autoscroll(vsb))
        except:
            pass
        self.configure(xscrollcommand=self._autoscroll(hsb))
        self.grid(column=0, row=0, sticky='nsew')
        try:
            vsb.grid(column=1, row=0, sticky='ns')
        except:
            pass
        hsb.grid(column=0, row=1, sticky='ew')
        master.grid_columnconfigure(0, weight=1)
        master.grid_rowconfigure(0, weight=1)
        # Copy geometry methods of master  (taken from ScrolledText.py)
        methods = tk.Pack.__dict__.keys() | tk.Grid.__dict__.keys() \
                  | tk.Place.__dict__.keys()
        for meth in methods:
            if meth[0] != '_' and meth not in ('config', 'configure'):
                setattr(self, meth, getattr(master, meth))

    @staticmethod
    def _autoscroll(sbar):
        '''Hide and show scrollbar as needed.'''
        def wrapped(first, last):
            first, last = float(first), float(last)
            if first <= 0 and last >= 1:
                sbar.grid_remove()
            else:
                sbar.grid()
            sbar.set(first, last)
        return wrapped

    def __str__(self):
        return str(self.master)

def _create_container(func):
    '''Creates a ttk Frame with a given master, and use this new frame to
    place the scrollbars and the widget.'''
    def wrapped(cls, master, **kw):
        container = ttk.Frame(master)
        container.bind('<Enter>', lambda e: _bound_to_mousewheel(e, container))
        container.bind('<Leave>', lambda e: _unbound_to_mousewheel(e, container))
        return func(cls, container, **kw)
    return wrapped

class ScrolledListBox(AutoScroll, tk.Listbox):
    '''A standard Tkinter Listbox widget with scrollbars that will
    automatically show/hide as needed.'''
    @_create_container
    def __init__(self, master, **kw):
        tk.Listbox.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)
    def size_(self):
        sz = tk.Listbox.size(self)
        return sz

import platform
def _bound_to_mousewheel(event, widget):
    child = widget.winfo_children()[0]
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        child.bind_all('<MouseWheel>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-MouseWheel>', lambda e: _on_shiftmouse(e, child))
    else:
        child.bind_all('<Button-4>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Button-5>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-Button-4>', lambda e: _on_shiftmouse(e, child))
        child.bind_all('<Shift-Button-5>', lambda e: _on_shiftmouse(e, child))

def _unbound_to_mousewheel(event, widget):
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        widget.unbind_all('<MouseWheel>')
        widget.unbind_all('<Shift-MouseWheel>')
    else:
        widget.unbind_all('<Button-4>')
        widget.unbind_all('<Button-5>')
        widget.unbind_all('<Shift-Button-4>')
        widget.unbind_all('<Shift-Button-5>')

def _on_mousewheel(event, widget):
    if platform.system() == 'Windows':
        widget.yview_scroll(-1*int(event.delta/120),'units')
    elif platform.system() == 'Darwin':
        widget.yview_scroll(-1*int(event.delta),'units')
    else:
        if event.num == 4:
            widget.yview_scroll(-1, 'units')
        elif event.num == 5:
            widget.yview_scroll(1, 'units')

def _on_shiftmouse(event, widget):
    if platform.system() == 'Windows':
        widget.xview_scroll(-1*int(event.delta/120), 'units')
    elif platform.system() == 'Darwin':
        widget.xview_scroll(-1*int(event.delta), 'units')
    else:
        if event.num == 4:
            widget.xview_scroll(-1, 'units')
        elif event.num == 5:
            widget.xview_scroll(1, 'units')
def start_up():
    poehelper_support.main()

if __name__ == '__main__':
    poehelper_support.main()




